export { resolveDomProps };

// TODO: formalize this against a spec.  This is currently a hacky implementation.
const resolveDomProps = (props) => {
  return Object.entries(props).reduce((acc, entry) => {
    const [prop, value] = entry;

    const isDomElementProp = DOM_PROPS_SET.has(prop);
    const isAriaAttribute = prop.startsWith('aria-');
    const isDataAttribute = prop.startsWith('data-');

    if (isDomElementProp || isAriaAttribute || isDataAttribute) {
      acc[prop] = value;
    }

    return acc;
  }, {});
};

const DOM_PROPS_SET = new Set([
  'abbr',
  'accept',
  'accept-charset',
  'accesskey',
  'action',
  'allowfullscreen',
  'allowtransparency',
  'alt',
  'async',
  'autocomplete',
  'autofocus',
  'autoplay',
  'cellpadding',
  'cellspacing',
  'challenge',
  'charset',
  'checked',
  'cite',
  'class',
  'class',
  'cols',
  'colspan',
  'command',
  'content',
  'contenteditable',
  'contextmenu',
  'controls',
  'coords',
  'crossorigin',
  'data',
  'datetime',
  'default',
  'defer',
  'dir',
  'disabled',
  'download',
  'draggable',
  'dropzone',
  'enctype',
  'for',
  'form',
  'formaction',
  'formenctype',
  'formmethod',
  'formnovalidate',
  'formtarget',
  'frameBorder',
  'headers',
  'height',
  'hidden',
  'high',
  'href',
  'hreflang',
  'for',
  'http-equiv',
  'icon',
  'id',
  'inputmode',
  'ismap',
  'itemid',
  'itemprop',
  'itemref',
  'itemscope',
  'itemtype',
  'kind',
  'label',
  'lang',
  'list',
  'loop',
  'manifest',
  'max',
  'maxlength',
  'media',
  'mediagroup',
  'method',
  'min',
  'minlength',
  'multiple',
  'muted',
  'name',
  'novalidate',
  'open',
  'optimum',
  'pattern',
  'ping',
  'placeholder',
  'poster',
  'preload',
  'radiogroup',
  'readonly',
  'rel',
  'required',
  'role',
  'rows',
  'rowspan',
  'sandbox',
  'scope',
  'scoped',
  'scrolling',
  'seamless',
  'selected',
  'shape',
  'size',
  'sizes',
  'sortable',
  'span',
  'spellcheck',
  'src',
  'srcdoc',
  'srcset',
  'start',
  'step',
  'style',
  'tabindex',
  'target',
  'title',
  'translate',
  'type',
  'typemustmatch',
  'usemap',
  'value',
  'width',
  'wmode',
  'onCopy',
  'onCut',
  'onPaste',
  'onLoad',
  'onError',
  'onWheel',
  'onScroll',
  'onCompositionEnd',
  'onCompositionStart',
  'onCompositionUpdate',
  'onKeyDown',
  'onKeyPress',
  'onKeyUp',
  'onFocus',
  'onBlur',
  'onChange',
  'onInput',
  'onSubmit',
  'onClick',
  'onContextMenu',
  'onDoubleClick',
  'onDrag',
  'onDragEnd',
  'onDragEnter',
  'onDragExit',
  'onDragLeave',
  'onDragOver',
  'onDragStart',
  'onDrop',
  'onMouseDown',
  'onMouseEnter',
  'onMouseLeave',
  'onMouseMove',
  'onMouseOut',
  'onMouseOver',
  'onMouseUp',
  'onSelect',
  'onTouchCancel',
  'onTouchEnd',
  'onTouchMove',
  'onTouchStart',
  'onAnimationStart',
  'onAnimationEnd',
  'onAnimationIteration',
  'onTransitionEnd',
  // conflicting props
  // 'wrap',
]);
